/**
 * Gradle build file for the inspectit.agent.java project.
 * 
 * @author Rene Kugel
 * @author Ivan Senic
 */
evaluationDependsOn(':inspectit.shared.all')
defaultTasks 'releaseAndAnalyze'

/** used by the eclipse buildship plugin */
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
  mavenCentral() //or jcenter()
}

/** defined to have it included in Eclipse as source */
sourceSets {
	externalResources {
		resources {
			srcDir mainExtResources
		}
	}
}

/** Some agent specific properties */
ext {
	distJarName = 'inspectit-agent'
	releaseName = "inspectit-agent-java6-${versionInfo}.zip"
}

/** Setting compile configuration as plugin in Eclipse needs it */
configurations {
  	closureCompiler
	compile {
		extendsFrom configurations.agentJavaProd
	}
	testCompile {
		extendsFrom configurations.agentJavaTest
		extendsFrom configurations.jmhbase
	}
}

/** Depend on inspectit.shared.all, testCompile must depend on shared all test sources because of TestBase class */
dependencies {
	closureCompiler 'com.google.javascript:closure-compiler:v20150609'
	compile project(':inspectit.shared.all')
	compile project(':inspectit.agent.java.sdk')
	testCompile project (path: ':inspectit.shared.all', configuration: 'testArchives')
}

/** Compile compatibility to 1.6 for all compile tasks */
tasks.withType(JavaCompile) { t ->
	sourceCompatibility = '1.6'
	targetCompatibility = '1.6'

	options.bootClasspath = configurations.java16rt.asPath
}

/**
 * Creates the jar. Excludes libs from the configurations.agentJavaProd that are not Java5 compatible. Uses existing manifest.
 */
jar {
	// use jarCheck to make sure all classes in our dependencies are at maximum in version 1.6
	doFirst {
		def jarCheckOutput = new File("$buildRoot/jarCheck")
		jarCheckOutput.mkdirs()
		configurations.agentJavaProd.each { file ->
			def name = file.name
			javaexec {
				classpath configurations.jarCheck
				main = 'com.mindprod.jarcheck.JarCheck'
				args = ["$file", "1.0", "1.6"]
				standardOutput = new File(jarCheckOutput, "$name-check.log").newOutputStream()
			}
		}
	}

	archivesBaseName = distJarName

	into('libs') {
		from project(':inspectit.shared.all').jar.outputs
		from project(':inspectit.agent.java.sdk').jar.outputs
		from configurations.agentJavaProd
	}

	manifest {
		from file("${mainResources}/META-INF/MANIFEST.MF")
	}
}


task minifyJS {
	description = 'Minify JS Agent sources'
	
	def inputDir = file("${mainResources}/js")
	def outputDir = file("$buildRoot/resources/main/js/min")
	
	inputs.dir inputDir
	outputs.dir outputDir
	
	def inputDirPath = inputDir.path;
	def outputDirPath = outputDir.path
			
	fileTree(dir: inputDirPath, include:"**/*.js").each {File file ->
		doLast {
		
			def relativeInputFilePath = file.path.substring(inputDirPath.length() + 1)
			def outputFilePath = outputDirPath+ file.path.substring(inputDirPath.length())
			
			//create the directory if required			
			new File("$outputFilePath").getParentFile().mkdirs()
			
			javaexec {
			
				workingDir = inputDirPath
			
				classpath configurations.closureCompiler
				main = 'com.google.javascript.jscomp.CommandLineRunner'
				
				def closureArgs = []
				closureArgs << "--compilation_level=SIMPLE_OPTIMIZATIONS"
				closureArgs << "--js_output_file=\"$outputFilePath\""  
				closureArgs << "$relativeInputFilePath"
				args closureArgs
			}
			
		}
	}
}
jar.dependsOn(minifyJS)

/**
 * Creates the release package.
 */
task release (type: Zip, dependsOn: jar) {
	description = "Releases the ${releaseName} package."
	group = 'Release'
	destinationDir = file(buildReleasePackages)
	archiveName = releaseName
	into('agent') {
		from jar.outputs
		from file(mainExtResources)
		from file(sharedResourcesLicense)
	}
}

task releaseAndAnalyze {
	description = "Runs all unit tests, all checks and releases the ${releaseName} package."
	group = 'Release'
	dependsOn(analyze, release)
}
