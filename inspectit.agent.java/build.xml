<?xml version="1.0"?>
<!-- ======================================================================
     inspectIT - Agent component
     Sophisticated Monitoring tool by NovaTec GmbH
     ====================================================================== -->
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="inspectIT Agent" default="release-all" basedir=".">
	<description>
		Build file for the agent component. This build provides build code for the
		agent project (contains all features that the agent release shares for java
		version 5 and upward).
	</description>


	<!-- *************************************************************** -->
	<!--                      S E T T I N G S                            -->
	<!-- *************************************************************** -->

	<property file="${basedir}/build.properties" />

	<import file="${build.common-targets.file}" />

	<path id="path.agent.classes">
		<pathelement location="${build.agent.classes}" />
	</path>

	<path id="path.agent.test.classes">
		<pathelement location="${build.agent.test.classes}" />
	</path>

	<path id="path.common.classes">
		<pathelement location="${build.commons.classes}" />
	</path>


	<!-- *************************************************************** -->
	<!--                        T A R G E T S                            -->
	<!-- *************************************************************** -->


	<target name="clean" description="--> Cleans the project">
		<delete dir="${build.root}" failonerror="false" />
		<delete dir="${release.root}" failonerror="false" />
		<delete dir="${lib.root}/prod" failonerror="false" />
		<delete dir="${lib.root}/test" failonerror="false" />
	</target>

	<target name="init" description="--> Creates necessary folder structure" depends="init-ivy">
		<mkdir dir="${build.root}" />
		<mkdir dir="${release.root}" />

		<!-- ivy properties used for the agent -->
		<ivy:settings file="${ivy.settings.file}" />
		<ivy:resolve file="${ivy.file}" />
		<ivy:cachepath pathid="lib.prod" conf="prod" />
		<ivy:cachefileset setid="lib.prod.fileset" conf="prod" />
		<ivy:cachepath pathid="lib.test" conf="test" />

		<ivy:resolve file="${ivy.file.commons}" />
		<ivy:cachepath pathid="lib.prod.commons" conf="prod" />
		<ivy:cachefileset setid="lib.prod.commons.fileset" conf="prod" />
	</target>

	<!-- *************************************************************** -->
	<!--                   B U I L D    T A R G E T S                    -->
	<!-- *************************************************************** -->
	<!-- These targets are used to build the projects that are used      -->
	<!-- to create the agent component. Note that the agent components   -->
	<!-- may be built from different projects depending on the           -->
	<!-- environment in which the agent should be applied                -->
	<!-- *************************************************************** -->

	<target name="build-agent" depends="init, release-commons, execute-java1.5-runtime-download">
		<mkdir dir="${build.agent.classes}" />

		<path id="compile.classpath">
			<path refid="lib.prod" />
			<path refid="lib.prod.commons" />
			<path refid="path.agent.classes" />
			<path refid="path.common.classes" />
		</path>

		<!-- we integrate the rt.jar of a JDK 1.5 as bootclasspath. This ensures that the code is really tested against
			 a 1.5 java environment. Only defining the source and target also allows a 1.6 JDK to compile the code and
			 this jdk does not detect errors based on classes that were not available in 1.5 -->
		<javac bootclasspath="${java15runtime.path}/${ftp.internal.java15runtime.file}" source="1.5" target="1.5" debug="true" nowarn="off" destdir="${build.agent.classes}" srcdir="${src.root}" includeAntRuntime="no" classpathref="compile.classpath" encoding="utf-8">
			<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-warn:${list.warning.options},+unused -Xemacs" />
		</javac>
	</target>

	<target name="execute-java1.5-runtime-download" depends="configure-java1.5-runtime-download, retrieve-java1.5-runtime" />

	<target name="configure-java1.5-runtime-download" depends="init-antcontrib">
		<var name="download.dir" value="${java15runtime.path}" />
	</target>

	<target name="release-commons" description="--> call the release of the commons project">
		<ant antfile="${build.commons.file}" target="clean" inheritAll="false" useNativeBasedir="true" />
		<ant antfile="${build.commons.file}" target="release" inheritAll="false" useNativeBasedir="true" />
	</target>

	<!-- *************************************************************** -->
	<!--                Q U A L I T Y     T A R G E T S                  -->
	<!-- *************************************************************** -->
	<!-- These targets are used to ensure the quality of the agent       -->
	<!-- component.                                                      -->
	<!-- *************************************************************** -->

	<target name="functional-tests" depends="build-agent,init-functional-tests">
		<path id="test.compile.classpath">
			<path refid="compile.classpath" />
			<path refid="lib.test" />
		</path>


		<!-- ensure that the original class files are not touched as we do not want to -->
		<!-- ship classes that are instrumented with cobertura to the customer -->
		<fileset id="test.classes-to-instrument" dir="${build.agent.classes}" includes="**/*.class" />

		<property name="test.workingDir" value="${basedir}"/>
		<property name="test.javac.source" value="1.5"/>
		<property name="test.javac.target" value="1.5"/>
		<property name="test.vmargs" value=""/>
		<property name="test.targetsuite" value="${testng.file}"/>

		<execute-testng 
			src.root="${src.root}" 
			test.root="${test.root}" 
			build.qa.test="${build.qa.test}"
			build.qa.test.testdata="${build.qa.test.testdata}" 
			build.qa.test.coveragedata="${build.qa.test.coveragedata}" 
			build.test.classes="${build.test.classes}" 
			build.instrumented.classes="${build.instrumented.classes}"
			test.workingdir="${test.workingDir}"
			test.javac.source="${test.javac.source}" 
			test.javac.target="${test.javac.target}"
			test.targetsuite="${test.targetsuite}"
			test.vmargs="${test.vmargs}"
			test.haltonfailure="true">
			<compile.classpath>
				<classpath>
					<path refid="compile.classpath"/>
				</classpath>
			</compile.classpath>
			<test.compile.classpath>
				<classpath>
					<path refid="test.compile.classpath"/>
				</classpath>
			</test.compile.classpath>
			<test.classes-to-instrument>
				<fileset refid="test.classes-to-instrument" />
			</test.classes-to-instrument>
		</execute-testng>
	</target>

	<target name="static-analysis" depends="build-agent,init-static-analysis">
		<!-- Prepare PDM -->
		<fileset dir="${src.root}" id="pmd.fileset">
			<include name="info/novatec/inspectit/**/*.java" />
			<exclude name="info/novatec/inspectit/**/test/**" />
		</fileset>

		<execute-pmd build.qa.analysis="${build.qa.analysis}" build.qa.analysis.pmd="${build.qa.analysis.pmd}">
			<pmd.fileset>
				<fileset refid="pmd.fileset" />
			</pmd.fileset>
		</execute-pmd>

		<!-- Prepare Checkstyle -->
		<fileset dir="${src.root}" id="checkstyle.fileset">
			<include name="info/novatec/inspectit/**/*.java" />
			<exclude name="info/novatec/inspectit/**/test/**" />
		</fileset>

		<execute-checkstyle build.qa.analysis="${build.qa.analysis}" build.qa.analysis.checkstyle="${build.qa.analysis.checkstyle}">
			<checkstyle.fileset>
				<fileset refid="checkstyle.fileset" />
			</checkstyle.fileset>
		</execute-checkstyle>

		<!-- Prepare FindBugs -->
		<property name="findbugs.sourcepath" value="${src.root}" />
		<property name="findbugs.classlocation" value="${build.agent.classes}" />
		<path id="findbugs.path">
			<path refid="lib.prod" />
			<path refid="lib.test" />
			<pathelement path="${build.commons.classes}" />
		</path>

		<execute-findbugs build.qa.analysis="${build.qa.analysis}" build.qa.analysis.findbugs="${build.qa.analysis.findbugs}" findbugs.sourcepath="${findbugs.sourcepath}" findbugs.classlocation="${findbugs.classlocation}">
			<findbugs.path>
				<path refid="findbugs.path" />
			</findbugs.path>
		</execute-findbugs>

		<!-- Prepare CPD -->
		<fileset dir="${src.root}" id="cpd.fileset">
			<include name="info/novatec/inspectit/**/*.java" />
			<exclude name="info/novatec/inspectit/**/test/**" />
		</fileset>
			
		<execute-cpd build.qa.analysis="${build.qa.analysis}" build.qa.analysis.cpd="${build.qa.analysis.cpd}">
			<cpd.fileset>
				<fileset refid="cpd.fileset" />
			</cpd.fileset>
		</execute-cpd>

		<!-- Fail on warnings -->
		<antcall target="static-analysis-fail-on-warnings" inheritrefs="true" />
	</target>


	<!-- *************************************************************** -->
	<!--                R E L E A S E     T A R G E T S                  -->
	<!-- *************************************************************** -->

	<target name="release-sun1.5" depends="build-agent" description="--> make a jar file for the whole project containing all dependencies">
		<mkdir dir="${build.release}" />
		<delete dir="${build.release}/sun1.5-data" failonerror="false" />
		<mkdir dir="${build.release}/sun1.5-data" />
		<mkdir dir="${build.release}/sun1.5-data/agent" />
		<mkdir dir="${build.release}/sun1.5-data/agent/config" />

		<copy todir="${build.release}/sun1.5-data/agent/config">
			<fileset dir="${config.root}" includes="**/*.*" />
		</copy>
		
		<copy todir="${build.release}/sun1.5-data/agent">
			<fileset dir="${basedir}" includes="logging-config.xml" />
		</copy>
		
		<mkdir dir="${build.release}/lib"/>
		<copy todir="${build.release}/lib">
			<fileset refid="lib.prod.commons.fileset" />
			<fileset refid="lib.prod.fileset" />
			<fileset dir="${commons.build.release}" includes="inspectit-commons.jar" />
		</copy>

		<jar destfile="${build.release}/sun1.5-data/agent/${dist.jar.name}" manifest="${basedir}/META-INF/MANIFEST.MF">
			<fileset dir="${build.agent.classes}" includes="**/*.class" />
			<fileset dir="${src.root}" includes="**/*.xml" />
			<fileset dir="${src.root}" includes="**/*.properties" />
			<fileset dir="${commons.src}" includes="version.log" />
			<zipfileset dir="${build.release}/lib" prefix="lib">
				<!-- exlucde javax.validation and javax.persistence due to incomatibility with Java 5, they are not used on Agent -->
				<patternset id="test">
					<exclude name="javax.validation/**" />
					<exclude name="org.hibernate.javax.persistence/**" />
				</patternset>
			</zipfileset>
		</jar>
		
		<delete dir="${build.release}/lib" />

		<zip destfile="${release.root}/${release.name.sun15}" basedir="${build.release}/sun1.5-data" />
		<zip destfile="${release.root}/${release.name.sun15}" update="true">
			<zipfileset dir="${basedir}/../" prefix="agent" includes="*LICENSE*.txt" />
		</zip>
	</target>

	<target name="release-all" depends="release-sun1.5" description="--> releases the agent for all versions" />

	<target name="release-and-analyze" depends="static-analysis, functional-tests, release-all" description="--> Calls the release target and then executes the static analysis with the functional tests" />

	<target name="integrate-version-information" description="This target creates a version.log file in the commons directory.">
		<property environment="env" />
		<property name="version" value="${env.RELEASE_VERSION}.${env.BUILD_NUMBER}" />

		<echo message="Using version: ${version}" />

		<echo file="${commons.src}/version.log" message="${version}" />
		<echo message="Wrote version.log to Commons/src" />
	</target>

</project>
