<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd"
	default-autowire="byType">

	<!-- holds definitions for service, log and serialization this definition will be used in the jmeter sampler tests don't add anything that cannot be instantiated in the jmeter samplers if you add a new 
		service it should be contained in this definition -->

	<!-- needed for the automatic AOP usage -->
	<bean id="advisorFactory" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<bean id="interfaceInterceptor" class="rocks.inspectit.ui.rcp.repository.service.cmr.proxy.ServiceInterfaceDelegateInterceptor" />

	<bean id="serviceMethodInterceptor" class="rocks.inspectit.ui.rcp.repository.service.cmr.proxy.ServiceMethodInterceptor" />

	<bean id="cachingPlatformIdentInterceptor" class="rocks.inspectit.ui.rcp.repository.service.cmr.proxy.CachingPlatformIdentInterceptor" />

	<bean id="cachingPlatformAdvice" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="cachingPlatformIdentInterceptor" />
		<property name="pattern" value=".*Proxy.*getCompleteAgent.*" />
	</bean>

	<bean id="cmrServiceProvider" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrServiceProvider">
		<lookup-method name="getCmrManagementService" bean="cmrManagementService" />
		<lookup-method name="getExceptionDataAccessService" bean="exceptionDataAccessService" />
		<lookup-method name="getJmxDataAccessService" bean="jmxDataAccessService" />
		<lookup-method name="getGlobalDataAccessService" bean="globalDataAccessService" />
		<lookup-method name="getInvocationDataAccessService" bean="invocationDataAccessService" />
		<lookup-method name="getServerStatusService" bean="serverStatusService" />
		<lookup-method name="getSqlDataAccessService" bean="sqlDataAccessService" />
		<lookup-method name="getTimerDataAccessService" bean="timerDataAccessService" />
		<lookup-method name="getHttpTimerDataAccessService" bean="httpTimerDataAccessService" />
		<lookup-method name="getStorageService" bean="storageService" />
		<lookup-method name="getConfigurationInterfaceService" bean="configurationInterfaceService" />
		<lookup-method name="getBusinessContextManagementService" bean="businessContextManagementService" />
		<lookup-method name="getInfluxDBService" bean="influxDBService" />
		<lookup-method name="getAlertAccessService" bean="alertAccessService" />
	</bean>

	<!-- CmrManagementService -->
	<bean id="cmrManagementService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.ICmrManagementService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="cmrManagementServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="cmrManagementServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.ICmrManagementService" />
		<property name="serviceName" value="CmrManagementService" />
		<property name="defaultValueOnError" value="false" />
	</bean>
	<!-- CmrManagementService End -->

	<!-- ExceptionDataAccessService -->
	<bean id="exceptionDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IExceptionDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="exceptionDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="exceptionDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IExceptionDataAccessService" />
		<property name="serviceName" value="ExceptionDataAccessService" />
		<property name="defaultValueOnError" value="true" />
	</bean>
	<!-- ExceptionDataAccessService End -->

	<!-- JmxDataAccessService -->
	<bean id="jmxDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IJmxDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="jmxDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="jmxDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IJmxDataAccessService" />
		<property name="serviceName" value="JmxDataAccessService" />
	</bean>
	<!-- JmxDataAccessService End -->

	<!-- GlobalDataAccessService -->
	<bean id="globalDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IGlobalDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="globalDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="globalDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IGlobalDataAccessService" />
		<property name="serviceName" value="GlobalDataAccessService" />
		<property name="defaultValueOnError" value="true" />
	</bean>
	<!-- GlobalDataAccessService End -->

	<!-- InvocationDataAccessService -->
	<bean id="invocationDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IInvocationDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="invocationDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="invocationDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IInvocationDataAccessService" />
		<property name="serviceName" value="InvocationDataAccessService" />
		<property name="defaultValueOnError" value="true" />
	</bean>
	<!-- InvocationDataAccessService End -->

	<!-- ServerStatusService -->
	<bean id="serverStatusService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IServerStatusService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="serverStatusServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="serverStatusServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IServerStatusService" />
		<property name="serviceName" value="ServerStatusService" />
		<property name="defaultValueOnError" value="false" />
	</bean>
	<!-- ServerStatusService End -->

	<!-- SqlDataAccessService -->
	<bean id="sqlDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.ISqlDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="sqlDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="sqlDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.ISqlDataAccessService" />
		<property name="serviceName" value="SqlDataAccessService" />
		<property name="defaultValueOnError" value="true" />
	</bean>
	<!-- SqlDataAccessService End -->

	<!--TimerDataAccessService -->
	<bean id="timerDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.ITimerDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="timerDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="timerDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.ITimerDataAccessService" />
		<property name="serviceName" value="TimerDataAccessService" />
		<property name="defaultValueOnError" value="true" />
	</bean>
	<!--TimerDataAccessService End -->

	<!-- HttpTimerDataAccessService -->
	<bean id="httpTimerDataAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IHttpTimerDataAccessService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="httpTimerDataAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="httpTimerDataAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IHttpTimerDataAccessService" />
		<property name="serviceName" value="HttpTimerDataAccessService" />
		<property name="defaultValueOnError" value="true" />
	</bean>
	<!-- HttpTimerDataAccessService End -->

	<!-- StorageService -->
	<bean id="storageService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IStorageService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="storageServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="storageServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IStorageService" />
		<property name="serviceName" value="StorageService" />
		<property name="defaultValueOnError" value="false" />
	</bean>
	<!-- StorageService End -->
	
	<!-- BusinessContextManagementService -->
	<bean id="businessContextManagementService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IBusinessContextManagementService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="businessContextManagementServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="businessContextManagementServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IBusinessContextManagementService" />
		<property name="serviceName" value="BusinessContextManagementService" />
	</bean>
	<!-- BusinessContextManagementService End -->
	
	<!-- ConfigurationInterfaceService -->
	<bean id="configurationInterfaceService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IConfigurationInterfaceService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="configurationInterfaceServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>

	<bean id="configurationInterfaceServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IConfigurationInterfaceService" />
		<property name="serviceName" value="ConfigurationInterfaceService" />
		<property name="defaultValueOnError" value="false" />
	</bean>
	<!-- ConfigurationInterfaceService End -->
	
	<!-- InfluxDBService -->
	<bean id="influxDBService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IInfluxDBService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="influxDBServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="influxDBServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IInfluxDBService" />
		<property name="serviceName" value="InfluxDBService" />
	</bean>
	<!-- InfluxDBService End -->
	
	<!-- AlertAccessService -->
	<bean id="alertAccessService" class="org.springframework.aop.framework.ProxyFactoryBean" scope="prototype" lazy-init="true">
		<property name="proxyInterfaces">
			<list>
				<value>rocks.inspectit.shared.cs.cmr.service.IAlertService</value>
				<value>rocks.inspectit.ui.rcp.repository.service.cmr.ICmrService</value>
			</list>
		</property>
		<property name="target" ref="alertAccessServiceTarget" />
		<property name="interceptorNames">
			<list>
				<value>serviceMethodInterceptor</value>
				<value>interfaceInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="alertAccessServiceTarget" class="rocks.inspectit.ui.rcp.repository.service.cmr.CmrService" scope="prototype" lazy-init="true">
		<property name="serviceInterface" value="rocks.inspectit.shared.cs.cmr.service.IAlertService" />
		<property name="serviceName" value="AlertAccessService" />
	</bean>
	<!-- AlertAccessService End -->

	<bean id="loggerPostProcessor" class="rocks.inspectit.shared.all.spring.logger.LoggerPostProcessor" />

	<bean id="classSchemaManager" class="rocks.inspectit.shared.all.storage.serializer.schema.ClassSchemaManager">
		<property name="schemaListFile" value="classpath:schema/schemaList.txt" />
	</bean>

	<bean id="serializationManager" class="rocks.inspectit.shared.all.storage.serializer.impl.SerializationManager" scope="prototype" lazy-init="true" />

	<bean id="kryoNetNetwork" class="rocks.inspectit.shared.all.util.KryoNetNetwork" />

	<bean id="serializationManagerProvider" class="rocks.inspectit.shared.all.storage.serializer.provider.SerializationManagerProvider">
		<lookup-method name="createSerializer" bean="serializationManager" />
	</bean>

	<bean class="rocks.inspectit.ui.rcp.details.generator.impl.JmxDetailsGenerator" />
	<bean id="configurationInterfaceManager" class="rocks.inspectit.ui.rcp.ci.InspectITConfigurationInterfaceManager" />
	<bean id="serializationManagerPostProcessor" class="rocks.inspectit.shared.cs.storage.serializer.SerializationManagerPostProcessor" />
</beans>
